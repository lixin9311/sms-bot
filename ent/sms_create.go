// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/lixin9311/sms-bot/ent/sms"
)

// SMSCreate is the builder for creating a SMS entity.
type SMSCreate struct {
	config
	mutation *SMSMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (sc *SMSCreate) SetCreatedAt(t time.Time) *SMSCreate {
	sc.mutation.SetCreatedAt(t)
	return sc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sc *SMSCreate) SetNillableCreatedAt(t *time.Time) *SMSCreate {
	if t != nil {
		sc.SetCreatedAt(*t)
	}
	return sc
}

// SetUpdatedAt sets the "updated_at" field.
func (sc *SMSCreate) SetUpdatedAt(t time.Time) *SMSCreate {
	sc.mutation.SetUpdatedAt(t)
	return sc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sc *SMSCreate) SetNillableUpdatedAt(t *time.Time) *SMSCreate {
	if t != nil {
		sc.SetUpdatedAt(*t)
	}
	return sc
}

// SetNumber sets the "number" field.
func (sc *SMSCreate) SetNumber(s string) *SMSCreate {
	sc.mutation.SetNumber(s)
	return sc
}

// SetData sets the "data" field.
func (sc *SMSCreate) SetData(b []byte) *SMSCreate {
	sc.mutation.SetData(b)
	return sc
}

// SetText sets the "text" field.
func (sc *SMSCreate) SetText(s string) *SMSCreate {
	sc.mutation.SetText(s)
	return sc
}

// SetDischargeTimestamp sets the "discharge_timestamp" field.
func (sc *SMSCreate) SetDischargeTimestamp(t time.Time) *SMSCreate {
	sc.mutation.SetDischargeTimestamp(t)
	return sc
}

// SetDeliveryState sets the "delivery_state" field.
func (sc *SMSCreate) SetDeliveryState(ss sms.DeliveryState) *SMSCreate {
	sc.mutation.SetDeliveryState(ss)
	return sc
}

// SetNillableDeliveryState sets the "delivery_state" field if the given value is not nil.
func (sc *SMSCreate) SetNillableDeliveryState(ss *sms.DeliveryState) *SMSCreate {
	if ss != nil {
		sc.SetDeliveryState(*ss)
	}
	return sc
}

// Mutation returns the SMSMutation object of the builder.
func (sc *SMSCreate) Mutation() *SMSMutation {
	return sc.mutation
}

// Save creates the SMS in the database.
func (sc *SMSCreate) Save(ctx context.Context) (*SMS, error) {
	var (
		err  error
		node *SMS
	)
	sc.defaults()
	if len(sc.hooks) == 0 {
		if err = sc.check(); err != nil {
			return nil, err
		}
		node, err = sc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SMSMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = sc.check(); err != nil {
				return nil, err
			}
			sc.mutation = mutation
			node, err = sc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(sc.hooks) - 1; i >= 0; i-- {
			mut = sc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SMSCreate) SaveX(ctx context.Context) *SMS {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (sc *SMSCreate) defaults() {
	if _, ok := sc.mutation.CreatedAt(); !ok {
		v := sms.DefaultCreatedAt()
		sc.mutation.SetCreatedAt(v)
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		v := sms.DefaultUpdatedAt()
		sc.mutation.SetUpdatedAt(v)
	}
	if _, ok := sc.mutation.DeliveryState(); !ok {
		v := sms.DefaultDeliveryState
		sc.mutation.SetDeliveryState(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *SMSCreate) check() error {
	if _, ok := sc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New("ent: missing required field \"created_at\"")}
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New("ent: missing required field \"updated_at\"")}
	}
	if _, ok := sc.mutation.Number(); !ok {
		return &ValidationError{Name: "number", err: errors.New("ent: missing required field \"number\"")}
	}
	if _, ok := sc.mutation.Data(); !ok {
		return &ValidationError{Name: "data", err: errors.New("ent: missing required field \"data\"")}
	}
	if _, ok := sc.mutation.Text(); !ok {
		return &ValidationError{Name: "text", err: errors.New("ent: missing required field \"text\"")}
	}
	if _, ok := sc.mutation.DischargeTimestamp(); !ok {
		return &ValidationError{Name: "discharge_timestamp", err: errors.New("ent: missing required field \"discharge_timestamp\"")}
	}
	if _, ok := sc.mutation.DeliveryState(); !ok {
		return &ValidationError{Name: "delivery_state", err: errors.New("ent: missing required field \"delivery_state\"")}
	}
	if v, ok := sc.mutation.DeliveryState(); ok {
		if err := sms.DeliveryStateValidator(v); err != nil {
			return &ValidationError{Name: "delivery_state", err: fmt.Errorf("ent: validator failed for field \"delivery_state\": %w", err)}
		}
	}
	return nil
}

func (sc *SMSCreate) sqlSave(ctx context.Context) (*SMS, error) {
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (sc *SMSCreate) createSpec() (*SMS, *sqlgraph.CreateSpec) {
	var (
		_node = &SMS{config: sc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: sms.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: sms.FieldID,
			},
		}
	)
	if value, ok := sc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sms.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := sc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sms.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := sc.mutation.Number(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sms.FieldNumber,
		})
		_node.Number = value
	}
	if value, ok := sc.mutation.Data(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBytes,
			Value:  value,
			Column: sms.FieldData,
		})
		_node.Data = value
	}
	if value, ok := sc.mutation.Text(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sms.FieldText,
		})
		_node.Text = value
	}
	if value, ok := sc.mutation.DischargeTimestamp(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sms.FieldDischargeTimestamp,
		})
		_node.DischargeTimestamp = value
	}
	if value, ok := sc.mutation.DeliveryState(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: sms.FieldDeliveryState,
		})
		_node.DeliveryState = value
	}
	return _node, _spec
}

// SMSCreateBulk is the builder for creating many SMS entities in bulk.
type SMSCreateBulk struct {
	config
	builders []*SMSCreate
}

// Save creates the SMS entities in the database.
func (scb *SMSCreateBulk) Save(ctx context.Context) ([]*SMS, error) {
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*SMS, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SMSMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *SMSCreateBulk) SaveX(ctx context.Context) []*SMS {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
